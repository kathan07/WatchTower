name: Full Build & Deploy

on:
  workflow_dispatch:
  workflow_call:
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:
  build-and-deploy-all:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Debug secrets
        run: |
          echo "Username is: ${{ secrets.DOCKERHUB_USERNAME }}"
          echo "Password length: ${#${{ secrets.DOCKERHUB_TOKEN }}}"

      - name: Docker login (manual fallback)
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push All Services
        run: |
          services=("client" "server" "alerting-service" "analysis-service" "cleaning-service" "monitoring-service" "scheduler-service")
          for service in "${services[@]}"; do
            docker buildx build \
              -f Dockerfiles/${service}.Dockerfile \
              -t ${{ secrets.DOCKERHUB_USERNAME }}/$service:latest \
              . \
              --push
          done

      # - name: Deploy All Services
      #   uses: appleboy/ssh-action@v1.0.0
      #   with:
      #     host: ${{ secrets.DOCKER_HOST }}
      #     username: ${{ secrets.DOCKER_USER }}
      #     key: ${{ secrets.DOCKER_KEY }}
      #     script: |
      #       docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

      #       # Deploy client service
      #       docker pull ${{ secrets.DOCKERHUB_USERNAME }}/client:latest
      #       docker service update \
      #         --image ${{ secrets.DOCKERHUB_USERNAME }}/client:latest \
      #         --env-add "SERVER_URL_DEPLOY=${{ secrets.SERVER_URL_DEPLOY }}" \
      #         client

      #       # Deploy server service
      #       docker pull ${{ secrets.DOCKERHUB_USERNAME }}/server:latest
      #       docker service update \
      #         --image ${{ secrets.DOCKERHUB_USERNAME }}/server:latest \
      #         --env-add "DATABASE_URL=${{ secrets.DATABASE_URL }}" \
      #         --env-add "REDIS_URL=${{ secrets.REDIS_URL }}" \
      #         --env-add "JWT_SECRET=${{ secrets.JWT_SECRET }}" \
      #         --env-add "STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}" \
      #         --env-add "STRIPE_API_KEY"=${{ secrets.STRIPE_API_KEY }} \
      #         server

      #       # Deploy alerting-service
      #       docker pull ${{ secrets.DOCKERHUB_USERNAME }}/alerting-service:latest
      #       docker service update \
      #         --image ${{ secrets.DOCKERHUB_USERNAME }}/alerting-service:latest \
      #         --env-add "DATABASE_URL=${{ secrets.DATABASE_URL }}" \
      #         --env-add "REDIS_URL=${{ secrets.REDIS_URL }}" \
      #         --env-add "SMTP_HOST=${{ secrets.SMTP_HOST }}" \
      #         --env-add "SMTP_PORT=${{ secrets.SMTP_PORT }}" \
      #         --env-add "SMTP_SECURE=${{ secrets.SMTP_SECURE }}" \
      #         --env-add "SMTP_USER=${{ secrets.SMTP_USER }}" \
      #         --env-add "SMTP_PASS=${{ secrets.SMTP_PASS }}" \
      #         alerting-service

      #       # Deploy analysis-service
      #       docker pull ${{ secrets.DOCKERHUB_USERNAME }}/analysis-service:latest
      #       docker service update \
      #         --image ${{ secrets.DOCKERHUB_USERNAME }}/analysis-service:latest \
      #         --env-add "DATABASE_URL=${{ secrets.DATABASE_URL }}" \
      #         analysis-service

      #       # Deploy cleaning-service
      #       docker pull ${{ secrets.DOCKERHUB_USERNAME }}/cleaning-service:latest
      #       docker service update \
      #         --image ${{ secrets.DOCKERHUB_USERNAME }}/cleaning-service:latest \
      #         --env-add "DATABASE_URL=${{ secrets.DATABASE_URL }}" \
      #         cleaning-service

      #       # Deploy monitoring-service
      #       docker pull ${{ secrets.DOCKERHUB_USERNAME }}/monitoring-service:latest
      #       docker service update \
      #         --image ${{ secrets.DOCKERHUB_USERNAME }}/monitoring-service:latest \
      #         --env-add "DATABASE_URL=${{ secrets.DATABASE_URL }}" \
      #         --env-add "REDIS_URL=${{ secrets.REDIS_URL }}" \
      #         monitoring-service

      #       # Deploy scheduler-service
      #       docker pull ${{ secrets.DOCKERHUB_USERNAME }}/scheduler-service:latest
      #       docker service update \
      #         --image ${{ secrets.DOCKERHUB_USERNAME }}/scheduler-service:latest \
      #         --env-add "DATABASE_URL=${{ secrets.DATABASE_URL }}" \
      #         --env-add "REDIS_URL=${{ secrets.REDIS_URL }}" \
      #         scheduler-service